/// @file
/// A class for managing mp3 splitting.
/// Makes extensive use of the quelcom tools.
/// @see mp3_handling.h

#ifndef MEDIA_SPLITTER_H
#define MEDIA_SPLITTER_H

#include <string>

using namespace std;

class media_splitter {
public:
  // Constructor
  media_splitter(const string & strBodyFile, const string & strTempBaseDir);
  // Destructor
  ~media_splitter();
  void split();
private:
  // Function used internally...
  void split_reset(); ///< Clear the directories and variables created by split()
public:
  // Return information about the parts and spaces:
  int get_num_parts();   ///< Return the number of extracted parts
  int get_num_spaces();  ///< Return the number of spaces discovered.
  bool space_at_begin(); ///< Was there a space at the very beginning of the body?
  bool space_at_end();   ///< Was there a space at the very end of the body?
  string get_part_file(const int intpart_num); ///< Return the path and name to an extracted file.
  int get_space_type(const int intspace_num); ///< Return the type of a given space that was discovered.
private:
  string strTempDir; ///< All the work happens here
  string strBodyFile; ///< Data is extracted from this file.

  /// Information generated by the "split" function
  struct split_info_struct {
    /// Number of extracted sub-sections
    int intNumExtracted;
    /// Number of spaces discovered.
    int intNumSpacesFound;
    /// Space found at the beginning of the body file?
    bool blnSpaceAtStart;
    /// Space found at the end of the body file?
    bool blnSpaceAtEnd;
  } split_info;

  /// Check additional mp3 specs which give quelcom problems
  void check_mp3_specs(const string & strBodyFile);
};

#endif
