This is the C++ source code for the instore player (Format Clocks edition)

FILES

    categories.h

        Defines 'seg_category', an enumeration type listing all the Format
        Clock segments known by the Player.

    format_clock_test_data.cpp, format_clock_test_data.h

        Contains format_clock_test_data, a class for generating and clearing
        out Format Clock-related test data.

    main.cpp

        Defines main(), where the Player's execution begins and ends.

        main() currently:

            * Parses and handles command-line arguments

            * Instantiates a Player object and calls it's run() method.

            * Catches and logs exceptions raised by Player.run()

            * Returns EXIT_SUCCESS or EXIT_FAILURE, depending on whether
              Player.run() raised an exception or not.

    Makefile.am

        Main make file for the 'src' project directory. Generated and (mostly)
        managed by KDevelop.

        Makefile.am can be edited by developers, but it's probably a better
        idea to make any project changes through KDevelop instead.

    music_history.cpp, music_history.h

        Defines 'music_history', a class for managing the Player's music
        history.

    player_config.h

        Defines 'player_config', a structure for storing player configuration
        settings. The settings are currently loaded from:

          - player.conf (db connection details)
          - tbldefs table (Most of the other settings)

        These are the "contant" settings which don't change dynamically based
        on the current date and time.

    player_constants.h

        Global player constants definitions.

        Examples:

          - PLAYER_LOG_FILE - Location of the log file
          - intmax_xmms     - Maximum number of XMMS sessions managed by the
                              Player.

    player.cpp, player.h

        Defines the 'player' class. This is the "God object" for the Player
        software (See: http://en.wikipedia.org/wiki/God_object).

        Also defines a few helper classes and types.

        Most of the program logic is found within the 'player' class, and
        should probably be refactored off into separate, independant (ie,
        less tightly-coupled) classes to make the code more modular and
        testable.

        Parts of player.cpp where split off into separate .cpp files to
        speed up compilation:

            - player_get_next_item.cpp
            - player_maintenance.cpp
            - player_transition.cpp

    player_get_next_item.cpp

        A split off section of player.cpp which provides the implementation
        for 'player' class methods which deal with fetching the next
        item (mp3, line in, etc) to play.

        player_get_next_item.cpp provides the implementation for these
        methods:

            - player::get_next_item()
            - player::get_next_item_promo()
            - player::get_next_item_check_fc_seg_change()
            - player::get_next_item_format_clock()
            - player::get_next_item_not_recent_music()

    player_maintenance.cpp

        A split off section of player.cpp which provides the implementation
        for 'player' class methods which deal with various background tasks
        that the player handles periodically.

        player_maintenance.cpp provides the implementation for these methods:

            - player::player_maintenance()
            - player::maintenance_check_received()
            - player::maintenance_check_waiting_cmds()
            - player::maintenance_operational_check()
            - player::maintenance_player_running()
            - player::maintenance_hide_xmms_windows()
            - player::maintenance_cache_pels()
            - player::log_music_playlist_to_db()

    player_playback_transition.cpp

        A split off section of player.cpp which provides the implementation
        for 'player' class methods which deal with transitioning (fading in,
        out, etc) from the currently-playing item to the next one.

        player_playback_transition.cpp provides the implementation for these
        methods:

            - player::playback_transition()
            - player::queue_event()
            - player::queue_volslide()

    player_run_data.cpp, player_run_data.h

        Defines 'player_run_data', a class which manages the Player's current
        playback state.

        player_run_data's jobs include:

            - Re-initialising playback status (Gets called when there is a
              serious,playback problem, to get things back to a known good
              state)

            - Storing the current format clock segment.

            - Managing allocation of playback backends (XMMS and Line-in)

        The basic idea behind the class is to centralise the player's
        state-related variables in one place, and to decouple them and their
        management methods from the main 'player' class.

    player_types.h

        Defines a few player-related types.

        Currently, only contains 'sound_usage', an enumeration type used by
        the 'player_run_data' class to record what a sound backend is currently
        being used for.

    player_util.cpp, player_util.h

        Player utility functions.

        Currently only defines one function:

            - write_liveinfo_setting()

    programming_element.cpp, programming_element.h

        Provides programming element-related classes, types, and global
        variables.

        Programming elements (aka playback items) are things which get played.
        eg: Announcements, songs, line-in, and even dead silence.

        Currently these things are defined:

            - programming_element

                A class for managing a single playback item. Contains details
                like:

                  - media (mp3, linein)
                  - playback voulme
                  - playback state, related to the programming element
                    - when the item playback started
                    - Has the item started playing?
                    - Has the item finished playing?
                  - Detailed media information, loaded from the schedule
                    database (and stored there by rrmedia-maintenance)
                  - Other details, if applicable:
                    - music bed details
                    - promo details

            - programming_element_list

                A list of programming elements (eg: an announcement batch)

            - prev_music_seg_pel

                A global variable containing the previous music segment's
                programming element list.

            - pel_cache

                Global variable for player storage of recent programming
                element lists. Used when the player is in a hurry to get
                a playlist (usually music) and there isn't time to generate a
                new one.

    README

        This file. Highish-level documentation and a guide to the source code.

    segment.cpp, segment.h

        Defines 'segment', a class managing Format Clock segments, and for
        managing segment-related item playback and retrieval.

SUB-DIRECTORIES

    common

        - cpp_common, C++ utilities written (mostly) by David.
