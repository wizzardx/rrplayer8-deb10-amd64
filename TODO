

* Fix Player compile warnings


* Mock db return in tests

  (and remove db transaction stuff from setup and teardown, and also remove
   requirement for 'schedule_test' database to be present with a correct login)


* Remove null logger usage (use mocks instead)


* Updates for the end of each hour

    -> Wanted by Riaan and Nadia

    -> I need to tell Gerhard about this.

    - Only music may be cut off when the hour changes

    - If the item about to play is non-music, and it will play past the end
      of the hour, then play music instead


* Fix transition problems with items that end too soon

    -> Wanted by Gerhard and Nadia

    - Example 1: LineIn that ends at end of segment, and next item wants to
                 crossfade but can't, so playback starts too soon.

        - Fix this by making linein's end later (seg end + crossfade length?

    - Example 2: MP3s that end too soon, and next item wants to crossfade

        - Fix this by logging a warning and not cross-fading after all.


* Split LineIn into a separate Format Clock category

    -> Wanted by Gerhard (and originally VJ)

    Currently, LineIn is considered to be a type of music (it is scheduled by
    creating a music playlist, with a 'LineIn' entry).

    - rrschedule-db updates:

      (rrschedule-db is the Debian installerfor the instore 'schedule'
       database)

        - Add a LineIn segment type
        - Update rrschedule-db package version

    - rrplayer-fc updates

      (rrplayer-fc is the Debian installer for the new Player. As opposed to
       rrplayer, which installs the old Player (one XMMS session, no Format
       Clocks)

        - Update rrschedule-db version dependency

            - Split off LineIn into a separate format clock category type

                - Existing logic needs to be updated to handle LineIn,
                  instead of the current differentiation between "Music", and
                  "Non-Music" segments.

                - For reverse compatibility, we need to still allow
                  LineIn to be scheduled within music segments.


* Enable forced-time segments

    -> Wanted by Gerhard and Riaan L. Nadia too?

    - rrschedule-db updates:

        - Add a blnforced_time setting to segments (default: FALSE, and NOT
          NULL?)

        - Add to segment cats: blnforced_time_interrupt_leeway - FALSE for
          music, and TRUE for everything else. Default to TRUE

        - Update version number

    - rrplayer-fc:

        - Update rrschedule-db version dependency

        - Refactor logic related to 'force time promo' (use same logic for it
          and 'force time segments')

        - Regularly (every 30s/60s?) check for the next forced-time ad/music

            - Also needs to be accurate to the second
              (eg: forced time ads/segment at 00:30:15 needs to start then, not
               00:30:00 or 00:31:00)

            - Also make sure that LineIn and Silence work this way

            - If there is something, then schedule the interrupt for that time.

            - If there is leeway (for the upcoming segment type (promo for
                forced-time-ads) at that time, ie time for the ad to finish,
                then don't schedule the interrupt.

            - When the 'current format clock time' to point to the start of the
              segment (not just current time), even if the previous item had
               some leeway.

            - this will skip segments that were before.

            - Also update regular 'get the next item' logic to get
              'forced time' segments before regular segments.

                - ie, similar to normal segments, when switching over (ie,
                  don't miss out small segments).

            - End of hour is allowed to interrupt forced-time segments (and
              promos)


* New features requested by Nadia

    -> Also wanted by Riaan, for SPAR

    -> See Nadia's emails for more details.

    - Add imaging between all songs

        -> UPDATE: Don't do this for now. Wait and see if we can get MU
                   sequencing nice enough so that we don't need to insert
                   imaging between them.

        -> I need to know where to get the imaging from. Most recently-played
           imaging segment?

    - Avoid playing slow and fast songs in succession

        -> I assume this does not apply when going between songs and
           announcements.

        - Get a bunch of songs from Nadia with different speeds, and ask her
          which ones are OK to play in succession and which aren't. Use that
          info to determine what kind of rules should be used.

        - Research determining song BPM (existing tools, algorithms from mp3
          player visualization plugins, etc)

        - Get separate average BPM values for the start and end of the song
          (first and last 30 seconds?). This is to handle (for instance) songs
          that start fast but end slow.

        - Add a rule saying that BPM may only change up to X BPM between songs.
          Determine X by checking against Nadias MP3s.

    - Avoid re-playing songs at the same time as on previous days.

        -> How long do we prevent this for? 2 weeks? 1 Month?

            -> UPDATE: Riaan says 2 weeks.

        -> How close may songs play to their previous time? 5 minutes?
           10 minutes?

            -> UPDATE: Riaan says: 1 hour before and after

        -> Does this relate to the current day of the week at all?

        - This will probably go into the player logic for fetching the
          next item during playback. The logic will change to:

          Skip items from the playlist while:

            1) The current item played recently
            2) The current artist played recently
            3) The song has recently played close to the current time

    - Avoid playing songs after songs which they have played after in the
      past.

        -> How long should this apply for? 2 weeks? 1 month?

            -> UPDATE: Riaan says: 1 month.

        - The 'get next OK' player logic will probably change to:

            Skip items from the playlist while:

                1) The current item played recently
                2) The current artist played recently
                3) The song has recently played close to the current time
                4) The song has recently played after the one that has just
                   been played instore.

            - The data for 'songs played after each other' could grow very
              large, so it needs to be stored in and queried from a database
              table.

              For performance reasons, the db queries need to be the last ones
              done in each iteration of the 'skip items from the playlist'
              logic.

    - Overlap/fade imaging over music

        -> Riaan says: Don't use 'hard markers', but allow imaging to overlap
           with adjacent music (similar to changing from music to music)

        Original TODOs, based on Nadia's e-mails, before Riaan's comment):

            - music gets lyric markers (where lyrics start in song, and where
              they end)

            - markers are used to determine when it is safe to overlap imaging.

            - Do this at both the start and the end of songs?

                eg: imaging1 -> music -> imaging2 (imaging1 and imaging 2
                                                   overlaps music start)

            - Possible enhancements (my ideas)
                - Chorus markers
                - gap markers (eg - for insertion of imaging in the middle)
                - real lyrics tags with timing?
                  (could use lyrics tags eg in wizard/karaoke-type display.
                   Also get the other timing details for free, except possibly
                   for chorus?)

            - These markers need to be kept synchronized with the mp3. eg if
              mp3 is remixed/editted/etc by studio then the lyrics/markers/etc
              are possibly no longer valid. Associate via a hash value? Or use
              some other possible fingerprint to help identify changes (approxy
              song song length?) - this lets us remix slightly, normalise, etc,
              without timings being invalidated.

    - Top of the hour with voice artist name and hour?

        -> I need more information for this

        -> UPDATE: Riaan spoke to nadia about getting a large selection of
                   recordings for this use. I still don't have enough
                   information to work on this.

    - Use a backend besides XMMS?

        -> Wanted by Gerhard, Nadia, and myself

        Whether or not to change is still under debate.

        Reasons for changing:

            -> XMMS is unstable and tends to crash instore randomly.

            -> XMMS source code is no longer developed (has been superceded
               by other projects)

            -> XMMS has been removed from Debian, and will not be in releases
               after Etch.

            -> XMMS has dependencies on older library versions, which can
               conflict with the newer versions found in later Debian
               versions.

            -> Because of the above library and Debian-related issues, over
               time it becomes harder for me to install (on my Debian Unstable
               workstation) the required XMMS dependencies so I can work on
               Player improvements.

            -> It makes more sense to use a backend library for music instead
               of a user music player frontend like XMMS.

        Reasons to not change:

            -> Riaan says "No New Bells and Whistles"

                -> David: Except for important improvements for new clients, eg
                          SPAR...

            -> Riaan says we should stick (for the indefinite future) to the
               same 'frozen base software' for instore installations. ie,
               instore boxes stay on Etch forever.

               -> This will make it harder (in the future) to develop new
                  software/updates/etc for the instore boxes.

                  - Developers will need to use old versions of programming
                    languages, old utilities, old library versions. Some of
                    these utilities might not even exist, or be installable on
                    Etch at all.

                    We may need to attempt our own back-ports in some cases
                    (online you can often only find backports for the most
                    recent 'oldstable' Debian releases). This may not be
                    possible in some cases due to conflicting dependencies
                    (eg: new version needs a newer libc, which only works with
                    new versions of all the binaries).

                  - Developers may need to start doing development on
                    dedicated 'Etch software development' workstations/servers,
                    because it isn't possible to install the old libraries etc
                    on a current server/workstation. Maybe we should start
                    using VirtualBox/VMWare instead for this if it becomes
                    necessary.

        If we do change to a new backend, then:

            - I need to make the Player less coupled to the MP3-playing
              backend (there is a lot of XMMS-specific code in the player).

            - We need to support extra gain, for stores with very soft sound
              cards.

            - We need to support CD audio.

            - I need to add automated tests to confirm that these requirements
              have been met (and remain met if we experiment with other
              backends)


* Check the player log on live machines for error messages, and fix them


* Expire cached data periodically

    -> Wanted by Gerhard

    - This is so that data gets occasionally reloaded from db/disk instead of
      always using an old version that was loaded into RAM sometime since the
      last Player restart.

    - Includes these caches:

        - Programming element collections
        - 'last music playlist'


* Check that XMMS song position changes while MP3s are playing

    -> Wanted by Gerhard

    Occasionally XMMS becomes unstable, says it is playing a song, but the song
    was meant to finish a long time ago. Then XMMS crashes

        - Also, make sure that rrplayer-fc logs when it kills XMMS(not just
          when it starts it up again)


* Use finer-grained times internally, instead of seconds

    -> Wanted by me

    - Research Boost date & time types and functions.
